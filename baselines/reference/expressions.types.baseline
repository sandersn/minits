"var negative = -1 var mult = (1 *... :: null
var negative = -1 :: int
-1 :: int
1 :: int
var mult = (1 * 2) :: int
(1 * 2) :: int
1 :: int
2 :: int
var div = (1 / 2) :: int
(1 / 2) :: int
1 :: int
2 :: int
var muldiv = ((1 * 2) / 3) :: int
((1 * 2) / 3) :: int
(1 * 2) :: int
1 :: int
2 :: int
3 :: int
var muldiv2 = ((1 / 2) * 3) :: int
((1 / 2) * 3) :: int
(1 / 2) :: int
1 :: int
2 :: int
3 :: int
var add = (1 + 2) :: int
(1 + 2) :: int
1 :: int
2 :: int
var sub = (1 - 2) :: int
(1 - 2) :: int
1 :: int
2 :: int
var addsub = ((1 + 2) - 3) :: int
((1 + 2) - 3) :: int
(1 + 2) :: int
1 :: int
2 :: int
3 :: int
var muladd = ((1 * 2) + 3) :: int
((1 * 2) + 3) :: int
(1 * 2) :: int
1 :: int
2 :: int
3 :: int
var muladd2 = (((1 * 2) * 3) + 4) :: int
(((1 * 2) * 3) + 4) :: int
((1 * 2) * 3) :: int
(1 * 2) :: int
1 :: int
2 :: int
3 :: int
4 :: int
var addmul2 = (1 + ((2 * 3) * 4)) :: int
(1 + ((2 * 3) * 4)) :: int
1 :: int
((2 * 3) * 4) :: int
(2 * 3) :: int
2 :: int
3 :: int
4 :: int
var addmul34 = (((1 * 2) + 3) + (... :: int
(((1 * 2) + 3) + ((4 * 5) * 6)) :: int
((1 * 2) + 3) :: int
(1 * 2) :: int
1 :: int
2 :: int
3 :: int
((4 * 5) * 6) :: int
(4 * 5) :: int
4 :: int
5 :: int
6 :: int
var ltaddmul = ((1 * 2) < (3 + (4... :: int
((1 * 2) < (3 + (4 * 5))) :: int
(1 * 2) :: int
1 :: int
2 :: int
(3 + (4 * 5)) :: int
3 :: int
(4 * 5) :: int
4 :: int
5 :: int
ltaddmul = addmul34 = ((addsub /=... :: int
ltaddmul :: int
addmul34 = ((addsub /= 1) | ((sub... :: int
addmul34 :: int
((addsub /= 1) | ((sub <= 12) & (... :: int
(addsub /= 1) :: int
addsub :: int
1 :: int
((sub <= 12) & (muldiv == muldiv2)) :: int
(sub <= 12) :: int
sub :: int
12 :: int
(muldiv == muldiv2) :: int
muldiv :: int
muldiv2 :: int
type Foo = {foo: string, bar: int} :: {foo: string, bar: int}
{foo: string, bar: int} :: {foo: string, bar: int}
string :: string
int :: int
var record = Foo {foo = "hi", bar... :: {foo: string, bar: int}
Foo {foo = "hi", bar = 0} :: {foo: string, bar: int}
"hi" :: string
0 :: int
var a = [1, 2, 3] :: Array<int>
[1, 2, 3] :: Array<int>
1 :: int
2 :: int
3 :: int
var b = ["hi", Foo {foo = "hi", b... :: Array<string>
["hi", Foo {foo = "hi", bar = 0}] :: Array<string>
"hi" :: string
Foo {foo = "hi", bar = 0} :: {foo: string, bar: int}
"hi" :: string
0 :: int
var which = if (add < sub) then (... :: int
if (add < sub) then (muladd + 1) ... :: int
(add < sub) :: int
add :: int
sub :: int
(muladd + 1) :: int
muladd :: int
1 :: int
addmul34 :: int
while (addmul2 > 0) do (muladd + 1) :: int
(addmul2 > 0) :: int
addmul2 :: int
0 :: int
(muladd + 1) :: int
muladd :: int
1 :: int
while (addmul2 > 0) do muladd = (... :: int
(addmul2 > 0) :: int
addmul2 :: int
0 :: int
muladd = (muladd + 1) :: int
muladd :: int
(muladd + 1) :: int
muladd :: int
1 :: int
for i = 0 to 12 do let var total ... :: null
0 :: int
12 :: int
let var total = (add * sub) in le... :: null
var total = (add * sub) :: int
(add * sub) :: int
add :: int
sub :: int
let var result = ((0 < total) & (... :: null
var result = ((0 < total) & (tota... :: int
((0 < total) & (total < 100)) :: int
(0 < total) :: int
0 :: int
total :: int
(total < 100) :: int
total :: int
100 :: int
((add * sub); if (i > 12) then br... :: null
(add * sub) :: int
add :: int
sub :: int
if (i > 12) then break else () :: null
(i > 12) :: int
i :: int
12 :: int
break :: null
() :: null"